from rdflib import Graph
from groq import Groq
from dotenv import load_dotenv
import os
from persona import Persona

# Criar uma persona
personaA = Persona(55, 1.61, "feminino", 22, "pouco ativo", "emagrecimento", 3)

print("Persona A:")

print(personaA.objetivo)

# Calcular IMC
imc = personaA.calcular_imc()
print(f"IMC: {imc:.2f}")

# Classificar IMC
classificacao = personaA.classificar_imc()
print(f"Classifica√ß√£o: {classificacao}")

# Calcular TMB
tmb = personaA.calcular_taxa_metabolica_basal()
print(f"TMB: {tmb:.2f}")

# Calcular GET
get = personaA.calcular_gasto_energetico_total()
print(f"GET: {get:.2f}")

print(f"N√∫mero de refei√ß√µes di√°rias: {personaA.quantidade_refeicoes}")

# Gerar queries para refei√ß√µes
queries_refeicoes = personaA.definir_refeicoes()
for refeicao, query in queries_refeicoes.items():
    print(f"\nQuery para {refeicao}:\n{query}")


load_dotenv()
GROQ_TOKEN = "gsk_your_groq_api_token_here"

# Carrega grafo RDF j√° salvo
g = Graph()
g.parse("C:\\Users\\Jacson\\Desktop\\websemantica\\mo656-kg-llm-nutri\\grafo_taco_tbca.ttl", format="turtle")

# Configura Groq
client = Groq(api_key=GROQ_TOKEN)

grupo_alimentar = ["Cereais e derivados", "Verduras, hortali√ßas e derivados", "Frutas e derivados", "Gorduras e √≥leos", "Carnes e derivados", "Pescados e frutos do mar", "Leite e derivados", "Bebidas (alco√≥licas e n√£o alco√≥licas)", "Ovos e derivados", "Produtos a√ßucarados", "Miscel√¢neas", "Outros alimentos industrializados", "Alimentos preparados", "Leguminosas e derivados", "Nozes e sementes"]

def executar_sparql(query):
    """
    Executa a query no grafo RDF e retorna resultados
    """
    try:
        results = g.query(query)
        return list(results)
    except Exception as e:
        return [("Erro", str(e))]

def responder(pergunta):
    """
    Pipeline: pergunta -> SPARQL -> resultado -> resposta em linguagem natural
    Tenta adaptar a consulta SPARQL caso ocorra erro, enviando o erro como feedback para a LLM.
    """
    print("üîé Pergunta:", pergunta)
    refeicoes = {}
    sparql = {}
    for refeicao, query in queries_refeicoes.items():
        refeicoes[refeicao] = executar_sparql(query)
        sparql[refeicao] = query
        print("\n‚ö° Query SPARQL gerada:\n", query)

    
    prompt = f"""
    Contexto extra√≠do do grafo:
    {refeicoes}

    Pergunta do usu√°rio: {pergunta}

    Consulta SPARQL usada: {sparql}

    - O usu√°rio quer saber sobre alimentos e seus nutrientes.
    - Responda somente com o conhecimento extra√≠do do grafo.
    - Os valores na consulta SPARQL s√£o para 100g do alimento.
    - Se a pergunta envolver por√ß√µes diferentes de 100g, fa√ßa os c√°lculos necess√°rios para ajustar os valores.
    - Interprete a resposta recebida do grafo e responda de forma clara e objetiva, n√£o espere que o resultado seja uma frase pronta.
    - N√£o traga explica√ß√µes, apenas a resposta direta.
    - Se o contexto extra√≠do do grafo for igual a "[]", responda "N√ÉO SEI".
    """

    print(f"\nPrompt final: {prompt}")

    chat_completion = client.chat.completions.create(
        messages=[{"role": "user", "content": prompt}],
        model="llama-3.3-70b-versatile",
        temperature=0
    )

    resposta = chat_completion.choices[0].message.content.strip()
    print("\nü§ñ Resposta final:", resposta)
    return resposta

responder(personaA.gerar_pergunta())

# üî• Teste
# responder("quais frutas s√£o ricas em pot√°ssio?")
# responder("quais alimentos s√£o ricos em prote√≠na?")
# responder("quantas calorias no Azeite, de oliva, extra virgem?")
# print("\n".join([str(r) for r in []]))
# responder("quantas calorias tem a vitela?")
# responder("quais os nutrientes do azeite?")
# responder("quais os nutrientes da vitela?")

# erro_feedback = None
# sparql = pergunta_para_sparql("quais os nutrientes do azeite?", erro_feedback)
# print(sparql)

# Pergunta direta para a LLM sem KG
# print(client.chat.completions.create(
#     messages=[{"role": "user", "content": "quais frutas s√£o ricas em pot√°ssio?"}],
#     model="llama-3.3-70b-versatile",
#     temperature=2
# ).choices[0].message.content.strip())

# Criar as queries SPARQL
# Elabore um card√°pio de dieta de emagrecimento para uma mulher adulta, com peso 70,8kg, altura de 1,61 m, idade 22 anos, n√≠vel de atividade f√≠sica leve.
# Informe qual √© a perda de peso calculada por m√™s, a partir da dieta calculada, e em quanto tempo essa mulher alcan√ßaria um IMC considerado adequado


