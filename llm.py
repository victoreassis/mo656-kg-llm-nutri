from rdflib import Graph
from groq import Groq
from dotenv import load_dotenv
import os

load_dotenv()
GROQ_TOKEN = os.getenv('GROQ_TOKEN')

# Carrega grafo RDF j√° salvo
g = Graph()
g.parse("grafo_taco_teste.ttl", format="turtle")

# Configura Groq
client = Groq(api_key=GROQ_TOKEN)

grupo_alimentar = ["Cereais e derivados", "Verduras, hortali√ßas e derivados", "Frutas e derivados", "Gorduras e √≥leos", "Carnes e derivados", "Pescados e frutos do mar", "Leite e derivados", "Bebidas (alco√≥licas e n√£o alco√≥licas)", "Ovos e derivados", "Produtos a√ßucarados", "Miscel√¢neas", "Outros alimentos industrializados", "Alimentos preparados", "Leguminosas e derivados", "Nozes e sementes"]

def pergunta_para_sparql(pergunta, erro_feedback=None):
    """
    Usa LLM para traduzir pergunta em SPARQL, adaptando caso receba erro como feedback
    """
   
    schema = """
    @prefix ns1: <http://mo656/taco/> .
    @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
    @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
    @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

    <http://mo656/taco/%C3%B3leo_de_baba%C3%A7u> a ns1:Alimento ;
        rdfs:label "√ìleo, de baba√ßu" ;
        ns1:Carboidrato_g 0.0 ;
        ns1:Cobre_mg 0.0 ;
        ns1:Colesterol_mg 0.0 ;
        ns1:C√°lcio_mg 0.0 ;
        ns1:Energia_kcal 884.0 ;
        ns1:Ferro_mg 0.0 ;
        ns1:Fibra_alimentar_g 0.0 ;
        ns1:F√≥sforo_mg 0.0 ;
        ns1:Lip√≠deos_g 100.0 ;
        ns1:Magn√©sio_mg 0.0 ;
        ns1:Mangan√™s_mg 0.0 ;
        ns1:Niacina_mg 0.0 ;
        ns1:Piridoxina_mg 0.0 ;
        ns1:Pot√°ssio_mg 0.0 ;
        ns1:Prote√≠na_g 0.0 ;
        ns1:Retinol_mcg 0.0 ;
        ns1:Riboflavina_mg 0.0 ;
        ns1:S√≥dio_mg 0.0 ;
        ns1:Tiamina_mg 0.0 ;
        ns1:Vitamina_C_mg 0.0 ;
        ns1:Zinco_mg 0.0 ;
        ns1:perteneceAoGrupo ns1:gorduras_e_%C3%B3leos .
    """
   
    prompt = f"""
Voc√™ √© um gerador de consultas SPARQL para um grafo RDF de alimentos e nutrientes.

## Exemplos de perguntas

- "Quais alimentos s√£o ricos em prote√≠na?"
- "Qual o teor de ferro na banana?"
- "Liste os alimentos do grupo cereal."

## Regras

- Estes s√£o os grupos alimentares presentes no grafo: {grupo_alimentar}
- Gere consultas SPARQL baseadas na pergunta do usu√°rio.
- Siga rigorosamente os padr√µes e propriedades do grafo RDF fornecido.
- N√£o invente propriedades, classes ou estruturas.
- Quando a pergunta envolver nutrientes informe o nutriente na resposta.
- Entender caloria como a propriedade Energia_kcal.
- Retorne SOMENTE a consulta SPARQL, sem explica√ß√µes, markdown, sem '''sparql''', '''sql'''.
- Sempre use prefixos conforme o grafo RDF.
- Os alimentos est√£o em por√ß√£o de 100g, sempre traga os valores para 100g.
- Se o usu√°rio pedir uma por√ß√£o diferente, ignore e traga os valores para 100g.
- Para perguntas como "quais alimentos s√£o ricos em prote√≠na", retorne alimentos que tenham mais de 10g de prote√≠na por por√ß√£o.
- Para perguntas como "quais alimentos s√£o ricos em pot√°ssio", retorne alimentos que tenham mais de 400g de pot√°ssio por por√ß√£o.
- N√£o fa√ßa c√°lculos ou binds de valores, traga os valores originais do grafo.
- Aplicar filtro de express√£o regular para encontrar APENAS o √≠nicio do nome alimento.
- O filter √© SEMPRE o √∫ltimo componente do WHERE em SPARQL.
- Adicionar o grupo alimentar como componente do WHERE APENAS quando extritamente mencionada.
- Use filtros para restringir resultados conforme a pergunta.
- Considere que os alimentos tipicamente consumidos cozidos, como arroz, feij√£o, carnes e legumes devem ser buscados em sua forma cozida, ignorando a forma crua.
- As consultas devem SEMPRE selecionar o nome do alimento, i.e, (?label).

## Ontologia simplificada
{schema}

## Regra de nomenclatura
- N√£o use nomes gen√©ricos como arroz_cozido.

## Pergunta do usu√°rio
"{pergunta}"
"""

    chat_completion = client.chat.completions.create(
        messages=[{"role": "user", "content": prompt}],
        model="llama-3.3-70b-versatile",
        temperature=0.5
    )

    resultado = chat_completion.choices[0].message.content.strip()
    return resultado

def executar_sparql(query):
    """
    Executa a query no grafo RDF e retorna resultados
    """
    try:
        results = g.query(query)
        return list(results)
    except Exception as e:
        return [("Erro", str(e))]


def responder(pergunta):
    """
    Pipeline: pergunta -> SPARQL -> resultado -> resposta em linguagem natural
    Tenta adaptar a consulta SPARQL caso ocorra erro, enviando o erro como feedback para a LLM.
    """
    print("üîé Pergunta:", pergunta)
    erro_feedback = None

    sparql = pergunta_para_sparql(pergunta, erro_feedback)
    print("\n‚ö° Query SPARQL gerada:\n", sparql)

    resultados = executar_sparql(sparql)
    print("\nüìä Resultados brutos:", resultados)

    prompt = f"""
    Contexto extra√≠do do grafo:
    {resultados}

    Pergunta do usu√°rio: {pergunta}

    Consulta SPARQL usada: {sparql}

    - O usu√°rio quer saber sobre alimentos e seus nutrientes.
    - Responda somente com o conhecimento extra√≠do do grafo.
    - Os valores na consulta SPARQL s√£o para 100g do alimento.
    - Se a pergunta envolver por√ß√µes diferentes de 100g, fa√ßa os c√°lculos necess√°rios para ajustar os valores.
    - Interprete a resposta recebida do grafo e responda de forma clara e objetiva, n√£o espere que o resultado seja uma frase pronta.
    - N√£o traga explica√ß√µes, apenas a resposta direta.
    - Se o contexto extra√≠do do grafo for igual a "[]", responda "N√ÉO SEI".
    """

    print(f"\nPrompt final: {prompt}")

    chat_completion = client.chat.completions.create(
        messages=[{"role": "user", "content": prompt}],
        model="llama-3.3-70b-versatile",
        temperature=0
    )

    resposta = chat_completion.choices[0].message.content.strip()
    print("\nü§ñ Resposta final:", resposta)
    return resposta


# üî• Teste
# responder("quais frutas s√£o ricas em pot√°ssio?")
# responder("quais alimentos s√£o ricos em prote√≠na?")
# responder("quantas calorias no Azeite, de oliva, extra virgem?")
# print("\n".join([str(r) for r in []]))
responder("quantas calorias tem o azeite?")
# responder("quais os nutrientes do azeite?")
# responder("quais os nutrientes da vitela?")

# erro_feedback = None
# sparql = pergunta_para_sparql("quais os nutrientes do azeite?", erro_feedback)
# print(sparql)

# Pergunta direta para a LLM sem KG
# print(client.chat.completions.create(
#     messages=[{"role": "user", "content": "quais frutas s√£o ricas em pot√°ssio?"}],
#     model="llama-3.3-70b-versatile",
#     temperature=2
# ).choices[0].message.content.strip())